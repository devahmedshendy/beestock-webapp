# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2  # This indicates a circleci version
jobs:
  build:
    working_directory: ~/app

    docker:
      - image: docker:18.03.0-ce-git

    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Install dependencies
          command: |
            apk add --no-cache py-pip
            pip install awscli==1.14.30

      - run:
          name: Build Docker image
          command: docker build -t beestock_webapp_dev .
          working_directory: ./vuejs-app

      - deploy:
          name: Push Docker Image to AWS ECR
          command: |
            if [ "${CIRCLE_BRANCH}" == "immutable-infra" ]; then
              CLUSTER='beestock_development'
              FAMILY='beestock_webapp_dev'
              DOCKER_IMAGE='beestock_webapp_dev'
              TASK='webapp_task_definition'
              SERVICE='webapp_service'
              AWS_REGION='us-east-2'

              aws configure set region $AWS_REGION
              $(aws ecr get-login --no-include-email --region $AWS_REGION)

              docker tag $DOCKER_IMAGE $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_IMAGE
              docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_IMAGE

              task_template='[
                {
                  "name": "%s",
                  "image": "%s.dkr.ecr.%s.amazonaws.com/%s",
                  "essential": true,
                  "cpu": 10,
                  "memory": 300,
                  "portMappings": [
                    {
                      "containerPort": 8080,
                      "hostPort": 8080
                    }
                  ],
                  "environment" : [
                      { "name" : "NODE_ENV", "value" : "development" }
                  ]
                }
              ]'
              echo "$task_template"

              task_def=$(printf "$task_template" $TASK $AWS_ACCOUNT_ID $AWS_REGION $TASK)

              json=$(aws ecs register-task-definition --container-definitions "$task_def" --family "$FAMILY")

              revision=$(echo "$json" | grep -o '"revision": [0-9]*' | grep -Eo '[0-9]+')

              aws ecs update-service --cluster "$CLUSTER" --service "$SERVICE" --task-definition "$TASK":"$revision"

              return 0
            fi

#  build:
#
#    # This indicates the docker image used will be the one built with node.js v8.9.1 from circleci repo
#    docker:
#      - image: circleci/node:8.9.1
#
#    # This indicates the working directory for the following steps
#    working_directory: ~/app
#
#    steps:
#      # This would checkout the project from github to the current working directory '.'
#      - checkout
#
#      - restore_cache:
#          keys:
#            - npm-deps-{{ checksum "vuejs-app/package.json" }}
#            - npm-deps-
#
#      - save_cache:
#          key: npm-deps-{{ checksum "vuejs-app/package.json" }}
#          paths:
#            - node_modules
#
#      - run:
#          name: Install Project Dependencies
#          command: npm install
#          working_directory: ./vuejs-app
#
#      - run:
#          name: Build The Project For Production
#          command: npm run build
#          working_directory: ./vuejs-app
#
#      # We need here to add 'dev.beesstock.com' to known_hosts so the OS can communicate with it
#      - run:
#         name: Add host dev.beesstock.com to ~/.ssh/known_hosts
#         command: ssh-keyscan dev.beesstock.com > ~/.ssh/known_hosts
#
#      # A build is done under ./vuejs-app/dist, so copy it remotely on 'dev.beesstock.com' server
#      - deploy:
#          name: Deploy dist/ to remote 'dev.beesstock.com' instance
#          command: scp -rp dist/ ubuntu@dev.beesstock.com:~/project/
#          working_directory: ./vuejs-app
#
#      # Using 'forever' command:
#      # . Restart the application
#      # . Specify options for saving different types of logs (forever, output, error)
#      # . Specific '-a' for appending to current logs
#      - run:
#          name: Restart The Application
#          command: ssh ubuntu@dev.beesstock.com 'forever restart -a -l ~/project/logs/forever.log -o ~/project/logs/out.log -e ~/project/logs/error.log ~/project/server.js'